const config = require('../../config/config');
const logger = require('../utils/logger');
const cacheService = require('../services/cacheService');
const compression = require('compression');

/**
 * üöÄ ÊÄßËÉΩ‰ºòÂåñ‰∏≠Èó¥‰ª∂ÈõÜÂêà
 */

// üìä ÊÄßËÉΩÁõëÊéß‰∏≠Èó¥‰ª∂
const performanceMonitor = (req, res, next) => {
  const startTime = process.hrtime.bigint();
  const startMemory = process.memoryUsage();
  
  // Ê∑ªÂä†ÊÄßËÉΩÊ†áËÆ∞Âà∞ËØ∑Ê±ÇÂØπË±°
  req.performanceStart = startTime;
  req.memoryStart = startMemory;
  
  // ÁõëÂê¨ÂìçÂ∫îÂÆåÊàê
  res.on('finish', () => {
    const endTime = process.hrtime.bigint();
    const endMemory = process.memoryUsage();
    
    const duration = Number(endTime - startTime) / 1000000; // ËΩ¨Êç¢‰∏∫ÊØ´Áßí
    const memoryDelta = endMemory.heapUsed - startMemory.heapUsed;
    
    // ËÆ∞ÂΩïÊÄßËÉΩÊåáÊ†á
    const perfData = {
      method: req.method,
      url: req.originalUrl,
      statusCode: res.statusCode,
      duration: Math.round(duration * 100) / 100,
      memoryDelta: Math.round(memoryDelta / 1024), // KB
      contentLength: res.get('Content-Length') || 0,
      userAgent: req.get('User-Agent') || 'unknown'
    };
    
    // ÊÄßËÉΩË≠¶ÂëäÈòàÂÄº
    if (duration > 1000) {
      logger.warn(`üêå Slow request detected: ${perfData.method} ${perfData.url} took ${perfData.duration}ms`, perfData);
    } else if (duration > 500) {
      logger.performance(`‚ö†Ô∏è Medium request: ${perfData.method} ${perfData.url} took ${perfData.duration}ms`, perfData);
    } else {
      logger.debug(`‚ö° Fast request: ${perfData.method} ${perfData.url} took ${perfData.duration}ms`, perfData);
    }
    
    // ÂÜÖÂ≠ò‰ΩøÁî®Ë≠¶Âëä
    if (memoryDelta > 10 * 1024 * 1024) { // 10MB
      logger.warn(`üß† High memory usage: ${perfData.memoryDelta}KB for ${perfData.method} ${perfData.url}`, perfData);
    }
  });
  
  next();
};

// üóúÔ∏è Êô∫ËÉΩÂéãÁº©‰∏≠Èó¥‰ª∂
const smartCompression = () => {
  if (!config.performance.compression.enabled) {
    return (req, res, next) => next();
  }
  
  return compression({
    level: config.performance.compression.level,
    threshold: config.performance.compression.threshold,
    filter: (req, res) => {
      // ‰∏çÂéãÁº©ÊµÅÂºèÂìçÂ∫î
      if (res.getHeader('Content-Type')?.includes('text/event-stream')) {
        return false;
      }
      
      // ‰∏çÂéãÁº©Â∑≤ÁªèÂéãÁº©ÁöÑÂÜÖÂÆπ
      if (res.getHeader('Content-Encoding')) {
        return false;
      }
      
      // Âè™ÂéãÁº©ÊñáÊú¨Á±ªÂûã
      const contentType = res.getHeader('Content-Type');
      if (contentType) {
        return /^(text\/|application\/(json|javascript|xml))/.test(contentType);
      }
      
      return compression.filter(req, res);
    }
  });
};

// üìã ËØ∑Ê±Ç‰ø°ÊÅØÂ¢ûÂº∫‰∏≠Èó¥‰ª∂
const requestEnhancer = (req, res, next) => {
  // Ê∑ªÂä†ËØ∑Ê±ÇÂîØ‰∏ÄID
  req.requestId = req.requestId || Math.random().toString(36).substring(2, 15);
  
  // Ê∑ªÂä†ÊÄßËÉΩÊ†áËÆ∞
  req.startTime = Date.now();
  
  // ËÆæÁΩÆÂìçÂ∫îÂ§¥
  res.setHeader('X-Request-ID', req.requestId);
  res.setHeader('X-Response-Time', '0');
  
  // ÁõëÂê¨ÂìçÂ∫îÂÆåÊàêÔºåÊõ¥Êñ∞ÂìçÂ∫îÊó∂Èó¥
  const originalSend = res.send;
  res.send = function(data) {
    const responseTime = Date.now() - req.startTime;
    res.setHeader('X-Response-Time', `${responseTime}ms`);
    
    return originalSend.call(this, data);
  };
  
  next();
};

// üö¶ ÂÅ•Â∫∑Ê£ÄÊü•‰ºòÂåñ‰∏≠Èó¥‰ª∂
const healthCheckOptimizer = (req, res, next) => {
  // ÂÅ•Â∫∑Ê£ÄÊü•ËØ∑Ê±ÇÂø´ÈÄüÂ§ÑÁêÜ
  if (req.path === '/health' || req.path === '/api/health') {
    // Ë∑≥Ëøá‰∏çÂøÖË¶ÅÁöÑ‰∏≠Èó¥‰ª∂
    req.skipPerformanceLogging = true;
    req.skipAuth = true;
  }
  
  next();
};

// üìä ÁºìÂ≠òÁªüËÆ°‰∏≠Èó¥‰ª∂
const cacheStatsHeader = (req, res, next) => {
  // Âú®ÂìçÂ∫î‰∏≠Ê∑ªÂä†ÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØÔºà‰ªÖÂºÄÂèëÁéØÂ¢ÉÔºâ
  if (config.server.nodeEnv === 'development') {
    res.on('finish', () => {
      try {
        const stats = cacheService.getStats();
        res.setHeader('X-Cache-Stats', JSON.stringify({
          apiKeyHitRate: stats.apiKeyCache.hitRate,
          cacheKeys: stats.apiKeyCache.keys,
          batchQueues: stats.batchQueues.totalItems
        }));
      } catch (error) {
        // ÂøΩÁï•ÈîôËØØÔºå‰∏çÂΩ±Âìç‰∏ªÊµÅÁ®ã
      }
    });
  }
  
  next();
};

// üîß ÂìçÂ∫îÂ§¥‰ºòÂåñ‰∏≠Èó¥‰ª∂
const responseOptimizer = (req, res, next) => {
  // ËÆæÁΩÆ‰ºòÂåñÁöÑÂìçÂ∫îÂ§¥
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  
  // ÂØπ‰∫éAPIÂìçÂ∫îÔºåËÆæÁΩÆÁºìÂ≠òÊéßÂà∂
  if (req.path.startsWith('/api/')) {
    // APIÂìçÂ∫î‰∏çÁºìÂ≠ò
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
  }
  
  // ‰ºòÂåñÈïøËøûÊé•
  res.setHeader('Connection', 'keep-alive');
  
  next();
};

// üö® ÈîôËØØÂ§ÑÁêÜ‰ºòÂåñ‰∏≠Èó¥‰ª∂
const errorOptimizer = (error, req, res, _next) => {
  const requestId = req.requestId || 'unknown';
  const duration = Date.now() - (req.startTime || Date.now());
  
  // ËÆ∞ÂΩïËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
  logger.error(`üí• Request error [${requestId}]:`, {
    error: error.message,
    stack: error.stack,
    url: req.originalUrl,
    method: req.method,
    duration,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    body: req.body ? JSON.stringify(req.body).substring(0, 500) : undefined
  });
  
  // ËÆæÁΩÆÈîôËØØÂìçÂ∫îÂ§¥
  res.setHeader('X-Request-ID', requestId);
  res.setHeader('X-Error-Time', `${duration}ms`);
  
  // Ê†πÊçÆÈîôËØØÁ±ªÂûãËøîÂõûÈÄÇÂΩìÁöÑÁä∂ÊÄÅÁ†Å
  let statusCode = 500;
  let message = 'Internal Server Error';
  
  if (error.name === 'ValidationError') {
    statusCode = 400;
    message = 'Validation Error';
  } else if (error.name === 'UnauthorizedError') {
    statusCode = 401;
    message = 'Unauthorized';
  } else if (error.name === 'ForbiddenError') {
    statusCode = 403;
    message = 'Forbidden';
  } else if (error.name === 'NotFoundError') {
    statusCode = 404;
    message = 'Not Found';
  } else if (error.name === 'TimeoutError') {
    statusCode = 408;
    message = 'Request Timeout';
  } else if (error.name === 'TooManyRequestsError') {
    statusCode = 429;
    message = 'Too Many Requests';
  }
  
  res.status(statusCode).json({
    error: message,
    message: config.server.nodeEnv === 'development' ? error.message : message,
    requestId,
    timestamp: new Date().toISOString()
  });
};

// üßπ Ê∏ÖÁêÜ‰∏≠Èó¥‰ª∂ÔºàÂú®Â∫îÁî®ÂÖ≥Èó≠Êó∂Ë∞ÉÁî®Ôºâ
const cleanup = async () => {
  try {
    await cacheService.close();
    logger.info('üßπ Performance middleware cleanup completed');
  } catch (error) {
    logger.error('‚ùå Performance middleware cleanup failed:', error);
  }
};

module.exports = {
  performanceMonitor,
  smartCompression,
  requestEnhancer,
  healthCheckOptimizer,
  cacheStatsHeader,
  responseOptimizer,
  errorOptimizer,
  cleanup
};